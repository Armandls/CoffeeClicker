package Persistance.SQL;

import Business.Entities.Game;
import Business.Entities.User;
import Persistance.DAO.GameDAO;
import Persistance.Exception.ConnectionErrorException;
import Persistance.Exception.NotFoundException;
import Persistance.Exception.PersistenceException;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

public class SQLGameDAO implements GameDAO {
    @Override
    public int addGame(Game game) throws ConnectionErrorException {
        try {
            String query = "INSERT INTO Game(currency_count, user) VALUES ('" +
                    game.getCurrencyCount() + "', '" +
                    game.getUser() + "');";
            return SQLConnector.getInstance().insertQueryAutogeneratedKey(query);
        } catch (ConnectionErrorException e) {
            throw new ConnectionErrorException("Error adding game. " + e.getMessage());
        }
    }

    @Override
    public List<Game> getGamesFromUser(User user) throws ConnectionErrorException{
        ArrayList<Game> games = new ArrayList<>();
        String query = "SELECT g.id_game, g.currency_count FROM Game AS g, User AS u WHERE g.user = u.mail AND " +
                        "u.mail = " + user.getEmail() + ";";
        ResultSet result = SQLConnector.getInstance().selectQuery(query);

        try {
            while (result.next()) {
                Game aux = new Game(result.getInt(1),
                        result.getInt(2), result.getBoolean(3), user.getEmail());
                games.add(aux);
            }
            return games;
        } catch (SQLException e) {
            throw new ConnectionErrorException(e.getMessage());
        }
    }
    @Override
    public List<Game> getUnfinishedGamesFromUser(String mail_user) throws ConnectionErrorException{
        ArrayList<Game> games = new ArrayList<>();
        String query = "SELECT id_game, currency_count, finished FROM Game AS g, User AS u " +
                "WHERE g.user = u.mail AND u.mail = '" + mail_user + "' AND g.finished = 0";

        ResultSet result = SQLConnector.getInstance().selectQuery(query);
        try {
            while (result.next()) {
                Game aux = new Game(result.getInt(1),
                        result.getInt(2), result.getBoolean(3), mail_user);
                games.add(aux);
            }
            return games;
        } catch (SQLException e) {
            throw new ConnectionErrorException(e.getMessage());
        }
    }

    @Override
    public List<Integer> getGameStatistics(Game game) throws PersistenceException{

        ArrayList<Integer> currencies = new ArrayList<>();
        String query = "SELECT s.current_currency FROM Game AS g, Statistics AS s WHERE g.id_game = s.id_game AND " +
                "s.id_game = " + game.getIdGame() + " ORDER BY s.game_min ASC" +";";
        ResultSet result = SQLConnector.getInstance().selectQuery(query);

        try {
            while (result.next()) {
                currencies.add(result.getInt(1));
            }
            return currencies;
        } catch (SQLException e) {
            throw new PersistenceException(e.getMessage());
        }

    }
    @Override
    public void updateGame(Game game) throws ConnectionErrorException{
        String query = "UPDATE Game SET currency_count = '" + game.getCurrencyCount() + "' WHERE id_game = '" + game.getIdGame() + "';";
        SQLConnector.getInstance().updateQuery(query);
    }

    @Override
    public Game getGame(int gameId) throws PersistenceException {
        String query = "SELECT currency_count, finished, user FROM Game WHERE id_game = " + gameId + ";";
        ResultSet result = SQLConnector.getInstance().selectQuery(query);

        try {
            if (result.next()) {
                int currencyCount = result.getInt("currency_count");
                boolean finished = result.getBoolean("finished");
                String userEmail = result.getString("user");
                return new Game(gameId, currencyCount, finished, userEmail);
            } else {
                throw new NotFoundException("Game with id: <" + gameId + "> was not found in the database.");
            }
        } catch (SQLException e) {
            throw new ConnectionErrorException(e.getMessage());
        }
    }

}
